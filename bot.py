# TEST FINAL DE SAUVEGARDE
import logging
import os
import aiohttp
import asyncio
import atexit
import traceback
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode
from concurrent.futures import ThreadPoolExecutor

# Version de l'application
APP_VERSION = "2024.03.19 - 19:15"

# --- Configuration ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# R√©cup√©ration des cl√©s depuis les variables d'environnement de Render
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CRYPTOCOMPARE_API_KEY = os.getenv("CRYPTOCOMPARE_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# Variables globales
application = None
http_session = None
executor = ThreadPoolExecutor(max_workers=1)

def run_async(coro):
    """Ex√©cute une coroutine dans une nouvelle boucle d'√©v√©nements."""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        return loop.run_until_complete(coro)
    except Exception as e:
        logger.error(f"Erreur dans run_async: {str(e)}\n{traceback.format_exc()}")
        raise
    finally:
        loop.close()

async def get_http_session():
    """Cr√©e ou r√©cup√®re la session HTTP globale."""
    global http_session
    if http_session is None or http_session.closed:
        http_session = aiohttp.ClientSession()
    return http_session

async def close_http_session():
    """Ferme la session HTTP globale."""
    global http_session
    if http_session and not http_session.closed:
        await http_session.close()
        http_session = None

async def get_crypto_news():
    """R√©cup√®re les derni√®res actualit√©s crypto depuis l'API CryptoCompare."""
    url = f"https://min-api.cryptocompare.com/data/v2/news/?lang=FR&api_key={CRYPTOCOMPARE_API_KEY}"
    session = None
    try:
        logger.info("D√©but de la r√©cup√©ration des actualit√©s...")
        session = await get_http_session()
        
        async with session.get(url, timeout=5) as response:
            logger.info(f"R√©ponse re√ßue de l'API: {response.status}")
            response.raise_for_status()
            data = await response.json()
            logger.info("Donn√©es JSON re√ßues avec succ√®s")

            if data.get("Type") == 100 and "Data" in data:
                articles = data["Data"][:5]
                logger.info(f"Nombre d'articles trouv√©s: {len(articles)}")
                
                formatted_news = []
                for article in articles:
                    title = article.get('title', 'Titre non disponible')
                    article_url = article.get('url', '#')
                    source = article.get('source', 'Source inconnue')
                    
                    # D√©terminer l'√©moji en fonction du titre
                    emoji = "üì∞"  # √âmoji par d√©faut
                    title_lower = title.lower()
                    
                    if any(word in title_lower for word in ['bitcoin', 'btc']):
                        emoji = "‚Çø"
                    elif any(word in title_lower for word in ['ethereum', 'eth']):
                        emoji = "Œû"
                    elif any(word in title_lower for word in ['prix', 'price', 'cours']):
                        emoji = "üìä"
                    elif any(word in title_lower for word in ['r√©gulation', 'regulation', 'loi', 'law']):
                        emoji = "‚öñÔ∏è"
                    elif any(word in title_lower for word in ['hack', 'piratage', 'vol']):
                        emoji = "üîí"
                    elif any(word in title_lower for word in ['adoption', 'partenariat', 'partnership']):
                        emoji = "ü§ù"
                    
                    # Formatage am√©lior√© avec HTML
                    formatted_news.append(
                        f"{emoji} <b>{title}</b>\n"
                        f"üìå Source: {source}\n"
                        f"üîó <a href='{article_url}'>Lire l'article</a>\n"
                    )
                
                # S√©parateur plus √©l√©gant entre les articles
                result = "\n\n" + "‚ú®" + "‚Äî" * 20 + "‚ú®" + "\n\n".join(formatted_news)
                logger.info("Formatage des actualit√©s termin√©")
                return result
            else:
                logger.error(f"Format de r√©ponse inattendu: {data}")
                return "D√©sol√©, je n'ai pas pu r√©cup√©rer les actualit√©s (format de r√©ponse inattendu)."
    except asyncio.TimeoutError:
        logger.error("Timeout lors de l'appel √† l'API CryptoCompare")
        return "D√©sol√©, la requ√™te a pris trop de temps. Veuillez r√©essayer."
    except aiohttp.ClientError as e:
        logger.error(f"ERREUR lors de l'appel √† CryptoCompare: {e}")
        return "Erreur de connexion √† la source d'actualit√©s. Veuillez r√©essayer plus tard."
    except Exception as e:
        logger.error(f"Erreur inattendue: {str(e)}\n{traceback.format_exc()}")
        return "Une erreur inattendue s'est produite. Veuillez r√©essayer."

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Message de bienvenue pour la commande /start."""
    try:
        await update.message.reply_html(
            f"Bonjour ! Envoyez /actus pour les derni√®res nouvelles crypto.\n\n"
            f"<i>Version du code : {APP_VERSION}</i>"
        )
    except Exception as e:
        logger.error(f"Erreur dans start_command: {str(e)}\n{traceback.format_exc()}")
        raise

async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Envoie les actualit√©s crypto."""
    try:
        await update.message.reply_text("Recherche des derni√®res actualit√©s...")
        logger.info("Commande /actus re√ßue, d√©but du traitement")
        
        news_message = await get_crypto_news()
        logger.info("Actualit√©s r√©cup√©r√©es, envoi du message")
        
        await update.message.reply_text(
            news_message,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        logger.info("Message envoy√© avec succ√®s")
    except Exception as e:
        logger.error(f"Erreur lors de l'envoi des actualit√©s: {str(e)}\n{traceback.format_exc()}")
        await update.message.reply_text("D√©sol√©, une erreur s'est produite lors de la r√©cup√©ration des actualit√©s.")

async def setup():
    """Initialise l'application et configure le webhook."""
    global application
    if not TELEGRAM_TOKEN:
        logger.error("La variable d'environnement TELEGRAM_TOKEN n'est pas d√©finie !")
        return
    
    try:
        # Initialisation de l'application
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("actus", news_command))
        
        # Configuration du webhook
        if WEBHOOK_URL:
            await application.initialize()
            webhook_info = await application.bot.get_webhook_info()
            full_webhook_url = f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}"
            
            if webhook_info.url != full_webhook_url:
                await application.bot.set_webhook(url=full_webhook_url)
                logger.info(f"Webhook configur√© sur {full_webhook_url}")
            else:
                logger.info(f"Webhook d√©j√† configur√© sur {full_webhook_url}")
        else:
            logger.error("WEBHOOK_URL n'est pas d√©finie !")
    except Exception as e:
        logger.error(f"Erreur lors de l'initialisation: {str(e)}\n{traceback.format_exc()}")

async def shutdown():
    """Ferme proprement toutes les ressources."""
    global application, http_session
    try:
        if application:
            await application.shutdown()
            logger.info("Application arr√™t√©e proprement.")
        
        if http_session and not http_session.closed:
            await http_session.close()
            logger.info("Session HTTP ferm√©e proprement.")
    except Exception as e:
        logger.error(f"Erreur lors de l'arr√™t: {str(e)}\n{traceback.format_exc()}")

# --- Partie Serveur Web (Flask) ---
app = Flask(__name__)

@app.route("/")
def index():
    return f"Bot server is running. Version: {APP_VERSION}"

@app.route(f"/{TELEGRAM_TOKEN}", methods=['POST'])
def webhook():
    if not application:
        logger.error("Application non initialis√©e")
        return "Bot not configured", 500
    
    try:
        update_data = request.get_json()
        if not update_data:
            logger.error("Donn√©es de mise √† jour vides")
            return "No data", 400
        
        logger.info(f"Webhook re√ßu: {update_data}")
        update = Update.de_json(update_data, application.bot)
        
        # Ex√©cuter le traitement de la mise √† jour dans un thread s√©par√©
        future = executor.submit(run_async, application.process_update(update))
        try:
            future.result(timeout=30)  # Attendre le r√©sultat avec un timeout
            logger.info("Traitement de la mise √† jour termin√© avec succ√®s")
            return "ok", 200
        except Exception as e:
            logger.error(f"Erreur lors du traitement de la mise √† jour: {str(e)}\n{traceback.format_exc()}")
            return "error", 500
    except Exception as e:
        logger.error(f"Erreur lors du traitement du webhook: {str(e)}\n{traceback.format_exc()}")
        return "error", 500

def init_app():
    """Initialise l'application Flask."""
    try:
        logger.info("D√©marrage de l'initialisation de l'application...")
        # Initialisation de l'application dans un thread s√©par√©
        future = executor.submit(run_async, setup())
        try:
            future.result(timeout=30)  # Attendre l'initialisation avec un timeout
            logger.info("Initialisation de l'application termin√©e avec succ√®s")
            return app
        except Exception as e:
            logger.error(f"Erreur lors de l'initialisation: {str(e)}\n{traceback.format_exc()}")
            return None
    except Exception as e:
        logger.error(f"Erreur lors de l'initialisation de l'application: {str(e)}\n{traceback.format_exc()}")
        return None

# Initialisation de l'application
app = init_app()

# Enregistrement de la fonction d'arr√™t
atexit.register(lambda: executor.submit(run_async, shutdown()))